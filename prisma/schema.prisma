generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                String         @id @default(uuid()) @db.Uuid
    email             String?        @unique
    createdAt         DateTime       @default(now()) @map("created_at")
    lastLogin         DateTime?      @map("last_login")
    conversations     Conversation[]
    worldIdHash       String?        @unique @map("world_id_hash")
    worldIdNullifier  String?        @unique @map("world_id_nullifier")
    worldIdCredential Json?          @map("world_id_credential")
    verificationLevel String         @default("device") @map("verification_level")
    lastVerification  DateTime?      @map("last_verification")
    profile           UserProfile?
    aiPersonality     AIPersonality?

    @@map("users")
}

model UserProfile {
    id               String           @id @default(uuid()) @db.Uuid
    userId           String           @unique @db.Uuid
    name             String?
    email            String?          @unique
    preferences      Json?
    language         String           @default("en")
    timezone         String           @default("UTC")
    topics           String[]         @default([])
    createdAt        DateTime         @default(now()) @map("created_at")
    updatedAt        DateTime         @updatedAt @map("updated_at")
    user             User             @relation(fields: [userId], references: [id])
    onboardingStatus OnboardingStatus @default(NOT_STARTED)

    @@map("user_profiles")
}

model Conversation {
    id        String    @id @default(uuid()) @db.Uuid
    userId    String    @map("user_id") @db.Uuid
    title     String
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    summary   String?
    context   Json?
    messages  Message[]
    user      User      @relation(fields: [userId], references: [id])

    @@map("conversations")
}

model Message {
    id             String       @id @default(uuid()) @db.Uuid
    conversationId String       @map("conversation_id") @db.Uuid
    content        String
    role           MessageRole
    createdAt      DateTime     @default(now()) @map("created_at")
    embedding      Float[]
    contextScore   Float?       @map("context_score")
    conversation   Conversation @relation(fields: [conversationId], references: [id])

    @@map("messages")
}

model AIPersonality {
    id                 String   @id @default(uuid()) @db.Uuid
    userId             String   @unique @db.Uuid
    friendliness       Int      @default(5)
    formality          Int      @default(5)
    verbosity          Int      @default(5)
    specializations    String[]
    communicationStyle String
    createdAt          DateTime @default(now()) @map("created_at")
    updatedAt          DateTime @updatedAt @map("updated_at")
    user               User     @relation(fields: [userId], references: [id])

    @@map("ai_personalities")
}

enum OnboardingStatus {
    NOT_STARTED
    IN_PROGRESS
    COMPLETED
}

enum MessageRole {
    user
    assistant
}
