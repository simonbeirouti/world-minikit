generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                String         @id @default(uuid()) @db.Uuid
    email             String         @unique
    createdAt         DateTime       @default(now()) @map("created_at")
    lastLogin         DateTime?      @map("last_login")
    preferences       Json?
    conversations     Conversation[]
    worldIdHash       String?        @unique @map("world_id_hash")
    worldIdNullifier  String?        @unique @map("world_id_nullifier")
    worldIdCredential Json?          @map("world_id_credential")
    verificationLevel String         @default("device") @map("verification_level")
    lastVerification  DateTime?      @map("last_verification")
    sessions          UserSession[]

    @@map("users")
}

model Conversation {
    id        String    @id @default(uuid()) @db.Uuid
    userId    String    @map("user_id") @db.Uuid
    title     String
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    summary   String?
    context   Json?
    messages  Message[]
    user      User      @relation(fields: [userId], references: [id])

    @@map("conversations")
}

model Message {
    id             String                 @id @default(uuid()) @db.Uuid
    conversationId String                 @map("conversation_id") @db.Uuid
    content        String
    role           MessageRole
    createdAt      DateTime               @default(now()) @map("created_at")
    embedding      Unsupported("vector")?
    contextScore   Float?                 @map("context_score")
    conversation   Conversation           @relation(fields: [conversationId], references: [id])

    @@map("messages")
}

model PersonalityTrait {
    id         String  @id @default(uuid()) @db.Uuid
    traitName  String  @map("trait_name")
    traitValue Float   @map("trait_value")
    context    Json?
    active     Boolean @default(true)

    @@map("personality_traits")
}

model UserSession {
    id           String   @id @default(uuid()) @db.Uuid
    userId       String   @map("user_id") @db.Uuid
    worldIdHash  String   @map("world_id_hash")
    sessionToken String   @map("session_token")
    createdAt    DateTime @default(now()) @map("created_at")
    expiresAt    DateTime @map("expires_at")
    user         User     @relation(fields: [userId], references: [id])

    @@map("user_sessions")
}

model AccessLog {
    id           String   @id @default(uuid()) @db.Uuid
    userId       String   @map("user_id") @db.Uuid
    worldIdHash  String   @map("world_id_hash")
    actionType   String   @map("action_type")
    resourceType String   @map("resource_type")
    resourceId   String   @map("resource_id") @db.Uuid
    timestamp    DateTime @default(now())
    metadata     Json?

    @@map("access_logs")
}

enum MessageRole {
    user
    assistant
}
